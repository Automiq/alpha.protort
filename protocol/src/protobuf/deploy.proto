syntax = 'proto3';

import "components.proto";

package alpha.protort.protocol.deploy;

message NodeInfo
{
    string name = 1;
    string address = 2;
    uint32 port = 3;
}

message NodeInfoList
{
    repeated NodeInfo node_info = 1;
}

message Instance
{
    string name = 1;
    ComponentKind kind = 2;
}

message InstanceList
{
    repeated Instance instance = 1;
}

message Map
{
    string node_name = 1;
    string instance_name = 2;
}

message MapList
{
    repeated Map map = 1;
}

message Connection
{
    ComponentEndpoint source = 1;
    ComponentEndpoint destination = 2;
}

message ConnectionList
{
    repeated Connection connection = 1;
}

enum PacketKind
{
    // Деплой конфигурации узла
    DeployConfig = 0;
    // Запрос конфигурации узла
    GetConfig = 1;
    // Запуск узла (старт роутера и компонентов)
    Start = 2;
    // Останов узла
    Stop = 3;
    // Запрос статуса узла
    GetStatus = 4;
    // Обновить схему развёрывания на лету
    // TODO
    Update = 5;   
}

message Config
{
    NodeInfo this_node_info = 1;
    NodeInfoList node_infos = 2;
    InstanceList instances = 3;
    MapList maps = 4;
    ConnectionList connections = 5;
}

// Деплой конфигурации узла

message DeployConfigRequest
{
    Config config = 1;
}

message DeployConfigResponse
{
    //TODO
}

message StatusRequest
{
    //TODO
}

message StatusResponse
{
    //имя ноды, с которой пришла статистика
    string node_name = 1;
    //количество принятых и отправленных пакетов
    uint32 counter_in_packets = 2;
    uint32 counter_out_packets = 3;
    //количество принятых и отправленных байт
    uint32 counter_in_bytes = 4;
    uint32 counter_out_bytes = 5;
    //аптайм ноды
    uint32 uptime = 6;

    //статус компоненты
    message ComponentStatus
    {
        string name = 1;
        uint32 counter_in_packets = 2;
        uint32 counter_out_packets = 3;
    }

    repeated ComponentStatus component_status_list = 7;

}

// Запрос конфигурации узла

message GetConfigRequest
{
    //TODO
}

message GetConfigResponse
{
    Config config = 1;
}

// Запуск узла

message StartRequest
{
    // TODO
}

message StartResponse
{
    // TODO
}

// Останов узла

message StopRequest
{
    // TODO
}

message StopResponse
{
    // TODO
}

// Пакет протокола развертывания
message Packet
{
    // Тип пакета
    PacketKind kind = 1;
    
    // Класс сообщения об ошибке
    message Error
    {
        // Строковое human-readable представление ошибки
        string message = 1;
    }

    // Ошибка (если есть)
    Error error = 2;

    message Request
    {
        oneof Payload
        {
            DeployConfigRequest deploy_config = 1;
            GetConfigRequest get_config = 2;
            StatusRequest status = 3;
            StartRequest start = 4;
            StopRequest stop = 5;
        }
    }

    message Response
    {
        oneof Payload
        {
            DeployConfigResponse deploy_config = 1;
            GetConfigResponse get_config = 2;
            StatusResponse status = 3;
            StartResponse start = 4;
            StopResponse stop = 5;
        }
    }

    oneof Payload
    {
        Request request = 3;
        Response response = 4;
    }
}
