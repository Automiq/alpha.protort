syntax = 'proto3';
import "components.proto";
package alpha.protort.protocol;


message NodeInfo
{
    string node_name = 1;
    string node_addr = 2;
    uint32 node_port = 3;
}

message NodeInfoList
{
    repeated NodeInfo  nodeinfo= 1;
}

message Instance
{
    string name = 1;
    ComponentKind kind = 2;
}

message InstanceList
{
    repeated Instance instance = 1;
}

message Map
{
    string node_name = 1;
    string instance_name = 2;
}

message MapList
{
    repeated Map map = 1;
}

message Connection
{
    ComponentEndpoint source = 1;
    ComponentEndpoint destination = 2;
}

message ConnectionList
{
    repeated Connection connection = 1;
}

enum RequestType
{
    DeployConfig = 0;   //деплой конфигурации
    Start = 1;          //старт ноды: старт роутера и компонентов
    Stop = 2;           //остановка ноды:
    GetNodeStatus = 3;  //запрос на статус ноды
    Update = 4;         //обновить схему развёрывания на лету
    GetDeployConfig = 6;
}

message DeployConfigMessage
{
    NodeInfo this_node_info = 5;
    NodeInfoList node_infos = 1;
    InstanceList instances = 2;
    MapList maps = 3;
    ConnectionList connections = 4;
}

message DeployConfigRequest
{
    DeployConfigMessage config = 1;
}

message DeployConfigResponse
{
    enum ErrType
    {
        NOERR = 0;
        BADTHISNODE = 1;
        BADNODEINFOS = 2;
        BADINSTATCES = 3;
        BADMAPS = 4;
        BADCONNECTIONS = 5;
    }

    ErrType error = 1;
}

message StatusRequest
{}

message StatusResponse
{
    uint32 amoung_packets = 1;

}

message StartRequest
{}

message StartResponse
{
    enum ErrType
    {
        NOERR = 0;
        GENERICERR = 1;
    }
   ErrType error = 1;
}

message StopRequest
{}

message StopResponse
{
    enum ErrType
    {
        NOERR = 0;
        GENERICERR = 1;
    }
    ErrType error = 1;
}

message GetDeployCofigRequest
{}

message GetDeployConfigResponse
{
    enum ErrType
    {
        NOERR = 0;
        GENERICERR = 1;
    }
    ErrType error = 1;
    DeployConfigMessage config = 2;
}

message DeployProtocolPacket
{
    RequestType request_type = 1;
    oneof typed_messages
    {
        DeployConfigRequest deploy_config_request = 2;
        DeployConfigResponse deploy_config_response = 3;
        StatusRequest status_request = 4;
        StatusResponse status_response = 5;
        StartRequest start_request = 6;
        StartResponse start_response = 7;
        StopRequest stop_request = 8;
        StopResponse stop_response = 9;
        GetDeployCofigRequest get_deploy_config_request = 10;
        GetDeployConfigResponse get_deploy_config_response = 11;
    }
}
