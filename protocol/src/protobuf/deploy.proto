// Версия синтаксиса
syntax = 'proto3';

// Импорт определений
import "components.proto";
import "backup.proto";

package alpha.protort.protocol.deploy;

message NodeInfo
{
    // Имя ноды
    string name = 1;
    //Адрес
    string address = 2;
    // Порт
    uint32 port = 3;
    //конфиг порт
    uint32 config_port = 4;
    // Информация о статусе ноды
    backup.BackupStatus backup_status = 5;
}

message NodeInfoList
{
    repeated NodeInfo node_info = 1;
}

message Instance
{
    // Имя комонента
    string name = 1;
    // Тип компонента
    ComponentKind kind = 2;
}

message InstanceList
{
    repeated Instance instance = 1;
}

// указывает, что компонет относиться к текущей ноде 
message Map
{
    string node_name = 1;
    string instance_name = 2;
}

message MapList
{
    repeated Map map = 1;
}

message Connection
{
    ComponentEndpoint source = 1;
    ComponentEndpoint destination = 2;
}

message ConnectionList
{
    repeated Connection connection = 1;
}

enum PacketKind
{
    // Деплой конфигурации узла
    DeployConfig = 0;
    // Запрос конфигурации узла
    GetConfig = 1;
    // Запуск узла (старт роутера и компонентов)
    Start = 2;
    // Останов узла
    Stop = 3;
    // Запрос статуса узла
    GetStatus = 4;
    // Обновить схему развёрывания на лету
    // TODO
    Update = 5;   
    Switch = 6;
}

// Конфигурация
message Config
{
    NodeInfo this_node_info = 1;
    repeated NodeInfo node_infos = 2;
    repeated Instance instances = 3;
    repeated Map maps = 4;
    repeated Connection connections = 5;
}

// Деплой конфигурации узла
message DeployConfigRequest
{
    Config config = 1;
}

message DeployConfigResponse
{
    // TODO
}

// Запрос конфигурации узла
message GetConfigRequest
{
}

message GetConfigResponse
{
    Config config = 1;
}

// Запуск узла
message StartRequest
{
    // TODO
}

message StartResponse
{
    // TODO
}

// Останов узла
message StopRequest
{
    // TODO
}

message StopResponse
{
    // TODO
}

// Запрос статуса узла
message StatusRequest
{
    // TODO
}


// Ответ на запрос статуса сетевого узла
message StatusResponse
{
    // Имя узла, предоставившего свой статус
    string node_name = 1;
    // Счётчик входящих пакетов узла
    uint32 in_packets_count = 2;
    // Счётчик исходящих пакетов узла
    uint32 out_packets_count = 3;
    // Количество входящих байт
    uint32 in_bytes_count = 4;
    // Количество исходящих байт
    uint32 out_bytes_count = 5;
    // Аптайм
    uint32 uptime = 6;
    // Информация о ноде
    NodeInfo node_info = 7;
	
	
    // Соообщение со статусом для компонента
    message ComponentStatus
    {
        // Имя компонента
        string name = 1;
        // Счётчик полученных пакетов
        uint32 in_packet_count = 2;
        // Счётчик отправленных пакетов
        uint32 out_packet_count = 3;
    }

    repeated ComponentStatus component_statuses = 8;

}

//запрос на совершение резервного перехода
message SwitchRequest
{
		
}

// ответ на переход
message SwitchResponse
{
		
}

// Пакет протокола развертывания
message Packet
{
    // Тип пакета
    PacketKind kind = 1;
    
    // Класс сообщения об ошибке
    message Error
    {
        // Строковое human-readable представление ошибки
        string message = 1;
    }
    // Ошибка (если есть)
    Error error = 2;

    // Запрос
    message Request
    {
        oneof Payload
        {
            DeployConfigRequest deploy_config = 1;
            GetConfigRequest get_config = 2;
            StatusRequest status = 3;
            StartRequest start = 4;
            StopRequest stop = 5;
            SwitchRequest switch = 6;
        }
    }

    // Ответ
    message Response
    {
        oneof Payload
        {
            DeployConfigResponse deploy_config = 1;
            GetConfigResponse get_config = 2;
            StatusResponse status = 3;
            StartResponse start = 4;
            StopResponse stop = 5;
            SwitchResponse switch = 6;
        }
    }

    oneof Payload
    {
        Request request = 3;
        Response response = 4;
    }
}
